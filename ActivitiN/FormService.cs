using System.Collections.Generic;

/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.activiti.engine
{

	using StartFormData = org.activiti.engine.form.StartFormData;
	using TaskFormData = org.activiti.engine.form.TaskFormData;
	using ProcessInstance = org.activiti.engine.runtime.ProcessInstance;
	using ProcessInstanceQuery = org.activiti.engine.runtime.ProcessInstanceQuery;
	using Task = org.activiti.engine.task.Task;
	using TaskQuery = org.activiti.engine.task.TaskQuery;


	/// <summary>
	/// Access to form data and rendered forms for starting new process instances and completing tasks.
	/// 
	/// @author Tom Baeyens
	/// @author Falko Menge (camunda)
	/// </summary>
	public interface FormService
	{

	  /// <summary>
	  /// Retrieves all data necessary for rendering a form to start a new process instance. This can be used to perform rendering of the forms outside of the process engine. </summary>
	  StartFormData getStartFormData(string processDefinitionId);

	  /// <summary>
	  /// Rendered form generated by the default build-in form engine for starting a new process instance. </summary>
	  object getRenderedStartForm(string processDefinitionId);

	  /// <summary>
	  /// Rendered form generated by the given build-in form engine for starting a new process instance. </summary>
	  object getRenderedStartForm(string processDefinitionId, string formEngineName);

	  /// <summary>
	  /// Start a new process instance with the user data that was entered as properties in a start form. </summary>
	  ProcessInstance submitStartFormData(string processDefinitionId, IDictionary<string, string> properties);

	  /// <summary>
	  /// Start a new process instance with the user data that was entered as properties in a start form. 
	  /// 
	  /// A business key can be provided to associate the process instance with a
	  /// certain identifier that has a clear business meaning. For example in an
	  /// order process, the business key could be an order id. This business key can
	  /// then be used to easily look up that process instance , see
	  /// <seealso cref="ProcessInstanceQuery#processInstanceBusinessKey(String)"/>. Providing such a business
	  /// key is definitely a best practice.
	  /// 
	  /// Note that a business key MUST be unique for the given process definition.
	  /// Process instance from different process definition are allowed to have the
	  /// same business key.
	  /// </summary>
	  /// <param name="processDefinitionId"> the id of the process definition, cannot be null. </param>
	  /// <param name="businessKey"> a key that uniquely identifies the process instance in the context or the
	  ///                    given process definition. </param>
	  /// <param name="properties"> the properties to pass, can be null. </param>
	  ProcessInstance submitStartFormData(string processDefinitionId, string businessKey, IDictionary<string, string> properties);

	  /// <summary>
	  /// Retrieves all data necessary for rendering a form to complete a task.  This can be used to perform rendering of the forms outside of the process engine. </summary>
	  TaskFormData getTaskFormData(string taskId);

	  /// <summary>
	  /// Rendered form generated by the default build-in form engine for completing a task. </summary>
	  object getRenderedTaskForm(string taskId);

	  /// <summary>
	  /// Rendered form generated by the given build-in form engine for completing a task. </summary>
	  object getRenderedTaskForm(string taskId, string formEngineName);

	  /// <summary>
	  /// Completes a task with the user data that was entered as properties in a task form. </summary>
	  void submitTaskFormData(string taskId, IDictionary<string, string> properties);

	  /// <summary>
	  /// Save the data that was entered as properties in a task form. </summary>
	  void saveFormData(string taskId, IDictionary<string, string> properties);

	  /// <summary>
	  /// Retrieves a user defined reference to a start form.
	  /// 
	  /// In the Explorer app, it is assumed that the form key specifies a resource
	  /// in the deployment, which is the template for the form.  But users are free
	  /// to use this property differently.
	  /// </summary>
	  string getStartFormKey(string processDefinitionId);

	  /// <summary>
	  /// Retrieves a user defined reference to a task form.
	  /// 
	  /// In the Explorer app, it is assumed that the form key specifies a resource
	  /// in the deployment, which is the template for the form.  But users are free
	  /// to use this property differently.
	  /// 
	  /// Both arguments can be obtained from <seealso cref="Task"/> instances returned by any
	  /// <seealso cref="TaskQuery"/>.
	  /// </summary>
	  string getTaskFormKey(string processDefinitionId, string taskDefinitionKey);

	}

}